[{"path":"https://pearce790.github.io/rankclust/articles/tutorial.html","id":"random-data-generation","dir":"Articles","previous_headings":"","what":"Random Data Generation","title":"rankclust Tutorial","text":"first generate samples BTL model objects equal worth parameters (.e., “rank-clustered”). Specifically, draw observations \\(=500\\) judges assess \\(J=8\\) objects. true, underlying parameter worth values \\[\\omega = \\big(1 \\ 2 \\ 4 \\ 4 \\ 4 \\ 16 \\ 16 \\ 32 \\big)\\] means 5 rank-clusters: 3 singletons, pair, triple. Let’s visualize observed rankings, \\(\\Pi\\):  can see stacked barchart object 8 receives first-place votes, objects 6 7 receive fewer first-place places, similar votes two . Knowing true worth parameters, \\(\\omega\\), unsurprising since objects 6 7 rank-clustered jointly second-highest object-level worth parameter. However, ’s hard rank objects ranking, make sense potentially-complex relationships rankings.","code":"set.seed(1) Pi <- rBTL(I=500,omega=c(1,2,4,4,4,16,16,32)) ggplot(melt(Pi),aes(x=value,fill=factor(Var2)))+   geom_bar(color=\"black\")+theme_bw()+   scale_fill_manual(values=c(\"#F7FCF5\",\"#E5F5E0\",\"#A1D99B\",\"#74C476\",\"#238B45\",\"#006D2C\",\"#00441B\",\"black\"))+   scale_x_continuous(breaks=1:10)+   labs(x=\"Object\",fill=\"Rank Place\",title=\"Observed Ranks by Object\")"},{"path":"https://pearce790.github.io/rankclust/articles/tutorial.html","id":"model-fitting-standard-btl-model","dir":"Articles","previous_headings":"","what":"Model-Fitting: Standard BTL Model","title":"rankclust Tutorial","text":"Let’s now fit standard BTL model observed rankings. place independent Gamma(\\(a_\\gamma=3,b_\\gamma=2\\)) prior worth parameter, \\(\\omega_j\\). Note running 2 chains 1000 iterations, remove first half burn-, perform thinning. posterior samples \\(\\omega\\) normalized post-hoc sum 1 (default; can changed using normalize_omega argument). Next, ’ll view trace plots posterior violin plots assess convergence mixing:   can start see patterns emerging: Object 8 preferred, followed objects 6 7 (similarly preferred ), followed objects 3, 4, 5 (similarly preferred among ), followed object 2, followed last object 1. similarities among groups, however, uncertain model-specified. leads us Rank-Clustered BTL, able specifically infer rank-clusters objects based observed ranking data.","code":"resBTL <- mcmc_BTL(Pi=Pi,J=8,a_gamma=3,b_gamma=2,num_iters=1000,chains=2,burn_prop = 0.5, thin = 1,seed = 1) #> [1] \"Estimating chain 1 of 2.\" #> [1] \"Estimating chain 2 of 2.\" head(resBTL) #>   chain iteration     omega1     omega2     omega3     omega4     omega5 #> 1     1       501 0.01616850 0.02830830 0.05553037 0.04982330 0.05716712 #> 2     1       502 0.01409034 0.02911296 0.04949263 0.04528831 0.05442372 #> 3     1       503 0.01291203 0.02761039 0.04514252 0.04939879 0.04864755 #> 4     1       504 0.01413523 0.02699455 0.05207117 0.05196366 0.04536763 #> 5     1       505 0.01360209 0.02692282 0.04915580 0.05483144 0.05196633 #> 6     1       506 0.01405869 0.02471245 0.05103484 0.05005285 0.05006881 #>      omega6    omega7    omega8 #> 1 0.1720380 0.1836909 0.4372736 #> 2 0.1951772 0.1825139 0.4299009 #> 3 0.1958714 0.1828112 0.4376061 #> 4 0.1825656 0.1965223 0.4303799 #> 5 0.1828447 0.1892798 0.4313970 #> 6 0.1949887 0.1879992 0.4270844 p1_btl <- ggplot(melt(resBTL,id.vars=c(1,2)),aes(x=iteration,y=value,color=chain))+   geom_line()+facet_wrap(~variable,nrow=3)+theme_bw()+theme(legend.position = c(.85,.12))+   labs(x=\"Iteration\",y=\"Value\",title=\"Trace Plots: Standard BTL\") #> Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 #> 3.5.0. #> ℹ Please use the `legend.position.inside` argument of `theme()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. p2_btl <- ggplot(melt(resBTL,id.vars=c(1,2)),aes(x=variable,y=value))+   geom_violin()+theme_bw()+   labs(x=\"Parameter\",y=\"Posterior\",title=\"Posterior Violin Plots: Standard BTL\") p1_btl p2_btl"},{"path":"https://pearce790.github.io/rankclust/articles/tutorial.html","id":"model-fitting-rank-clustered-btl-model","dir":"Articles","previous_headings":"","what":"Model-Fitting: Rank-Clustered BTL Model","title":"rankclust Tutorial","text":"now fit Rank-Clustered BTL model observed rankings. specified model, place PSSF prior hyperparameters \\(a_\\gamma=3\\), \\(b_\\gamma=2\\), \\(\\lambda=5\\) vague. Note running 2 chains num_iters=1000 outer iterations nu_reps=2 inner iterations total 2000 iterations per chain, remove first half burn-perform thinning. posterior samples \\(\\omega\\) normalized post-hoc sum 1 (default; can changed using normalize_omega argument). Next, ’ll view trace plots posterior violin plots assess convergence mixing:   Just , can see Object 8 preferred, followed objects 6 7 (similarly preferred ), followed objects 3, 4, 5 (similarly preferred among ), followed object 2, followed last object 1. “similar” groups objects preferred? can see examining posterior clustering matrix:  Based figure, see Objects 6 7 rank-clustered high posterior probability, objects 3, 4, 5. Objects 8, 2, 1 singleton clusters. result precisely aligns true rank-clustering objects based \\(\\omega\\) generated rankings.","code":"nu0 <- apply(resBTL[,-c(1,2)],2,mean) # initialize at posterior mean of standard model resRCBTL <- mcmc_RCBTL(Pi=Pi,J=8,a_gamma=3,b_gamma=2,lambda=5,nu0=nu0,                        num_iters=500,nu_reps=2,chains=2,burn_prop=0.5,thin=1,seed=1) #> [1] \"Estimating chain 1 of 2.\" #> [1] \"Estimating chain 2 of 2.\" head(resRCBTL) #>   chain iteration K     omega1     omega2     omega3     omega4     omega5 #> 1     1       501 5 0.01197153 0.02372197 0.04630879 0.04630879 0.04630879 #> 2     1       502 5 0.01110262 0.02362131 0.04427417 0.04427417 0.04427417 #> 3     1       503 5 0.01154979 0.02291681 0.04760864 0.04760864 0.04760864 #> 4     1       504 5 0.01326568 0.02566073 0.04965306 0.04965306 0.04965306 #> 5     1       505 5 0.01310281 0.02514086 0.04742993 0.04742993 0.04742993 #> 6     1       506 5 0.01383825 0.02851416 0.04824661 0.04824661 0.04824661 #>      omega6    omega7    omega8        nu1       nu2       nu3      nu4 #> 1 0.2015069 0.2015069 0.4223663 0.07050187 0.1397017 0.2727183 1.186699 #> 2 0.2004170 0.2004170 0.4316195 0.06645674 0.1413896 0.2650109 1.199632 #> 3 0.1947861 0.1947861 0.4331353 0.06866033 0.1362341 0.2830203 1.157950 #> 4 0.1931995 0.1931995 0.4257154 0.07509461 0.1452607 0.2810769 1.093667 #> 5 0.1803830 0.1803830 0.4587005 0.07589345 0.1456197 0.2747214 1.044806 #> 6 0.1941247 0.1941247 0.4246583 0.07593182 0.1564599 0.2647338 1.065181 #>        nu5 nu6 nu7 nu8 G1 G2 G3 G4 G5 G6 G7 G8 #> 1 2.487369  NA  NA  NA  1  2  3  3  3  4  4  5 #> 2 2.583536  NA  NA  NA  1  2  3  3  3  4  4  5 #> 3 2.574870  NA  NA  NA  1  2  3  3  3  4  4  5 #> 4 2.409897  NA  NA  NA  1  2  3  3  3  4  4  5 #> 5 2.656863  NA  NA  NA  1  2  3  3  3  4  4  5 #> 6 2.330141  NA  NA  NA  1  2  3  3  3  4  4  5 p1_rcbtl <- ggplot(melt(resRCBTL[,1:11],id.vars=c(1,2,3)),aes(x=iteration,y=value,color=chain))+   geom_line()+facet_wrap(~variable,nrow=5)+theme_bw()+   labs(x=\"Iteration\",y=\"Value\",title=\"Trace Plots: Rank-Clustered BTL\") p2_rcbtl <- ggplot(melt(resRCBTL[,1:11],id.vars=c(1,2,3)),aes(x=variable,y=value))+   geom_violin()+theme_bw()+   labs(x=\"Parameter\",y=\"Posterior\",title=\"Posterior Violin Plots: Rank-Clustered BTL\") p1_rcbtl p2_rcbtl order_omega <- order(apply(resRCBTL[,4:11],2,mean)) pairs <- expand.grid(i=1:8,j=1:8,prob=0) pairs <- pairs[pairs$i < pairs$j,] pairs$prob <- apply(pairs,1,function(pair){   i <- pair[1]; j <- pair[2]   mean(apply(resRCBTL[,paste0(\"G\",c(i,j))],1,function(x){x[1]==x[2]})) }) pairs2 <- pairs[,c(2,1,3)]; names(pairs2) <- c(\"i\",\"j\",\"prob\") pairs3 <- data.frame(i=1:8,j=1:8,prob=1) pairs <- rbind(pairs,pairs2,pairs3)  ggplot(pairs,aes(x=factor(i,levels=rev(order_omega)),                  y=factor(j,levels=order_omega),fill=prob))+   geom_tile()+scale_fill_gradient(low=\"white\",high=\"black\",breaks=c(0,.5,1))+   theme_bw()+labs(x=element_blank(),y=element_blank(),fill=\"Probability\",                   title=\"Rank-Clustering Posterior Probabilities\")+   theme(legend.position = c(.8,.9),legend.direction = \"horizontal\",         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))"},{"path":"https://pearce790.github.io/rankclust/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Pearce. Author, maintainer. Elena Erosheva. Author.","code":""},{"path":"https://pearce790.github.io/rankclust/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pearce M, Erosheva E (2024). rankclust: Fit Bayesian, Rank-Clustered Bradley-Terry-Luce Model Ordinal Comparison Data. R package version 0.0.0.9000, https://pearce790.github.io/rankclust/.","code":"@Manual{,   title = {rankclust: Fit a Bayesian, Rank-Clustered Bradley-Terry-Luce Model to Ordinal Comparison Data},   author = {Michael Pearce and Elena Erosheva},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://pearce790.github.io/rankclust/}, }"},{"path":"https://pearce790.github.io/rankclust/reference/dBTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the density of ordinal comparison data based on BTL models — dBTL","title":"Calculate the density of ordinal comparison data based on BTL models — dBTL","text":"function calculates density ordinal comparison data (e.g., complete rankings, partial rankings, pairwise comparisons, groupwise comparisons) based appropriate Bradley-Terry-Luce (BTL) model object-specific worth parameters, omega.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/dBTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the density of ordinal comparison data based on BTL models — dBTL","text":"","code":"dBTL(Pi, omega, log = FALSE, groupwise = FALSE)"},{"path":"https://pearce790.github.io/rankclust/reference/dBTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the density of ordinal comparison data based on BTL models — dBTL","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. omega vector non-negative object worth parameters. log boolean indicate whether log density returned. Default FALSE. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/dBTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the density of ordinal comparison data based on BTL models — dBTL","text":"numeric joint density observed rankings.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/dBTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the density of ordinal comparison data based on BTL models — dBTL","text":"","code":"Pi <- matrix(data=c(1,2,3,NA,NA,1,2,3,4,5),byrow=TRUE,nrow=2) dBTL(Pi=Pi,omega=c(10,8,6,4,2),log=TRUE,groupwise=FALSE) #> [1] -5.821566 dBTL(Pi=Pi,omega=c(10,8,6,4,2),log=TRUE,groupwise=TRUE) #> [1] -4.5486"},{"path":"https://pearce790.github.io/rankclust/reference/fit_BTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Bayesian BTL model to ordinal comparison data (recommended for internal use only; use mcmc_BTL function instead) — fit_BTL","title":"Fit a Bayesian BTL model to ordinal comparison data (recommended for internal use only; use mcmc_BTL function instead) — fit_BTL","text":"function fits standard Bayesian BTL model ordinal comparison data (e.g., complete rankings, partial rankings, pairwise comparisons, groupwise comparisons) worth parameter receives independent Gamma prior.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/fit_BTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Bayesian BTL model to ordinal comparison data (recommended for internal use only; use mcmc_BTL function instead) — fit_BTL","text":"","code":"fit_BTL(   Pi,   J,   a_gamma,   b_gamma,   nu0 = NULL,   num_iters = 100,   groupwise = FALSE )"},{"path":"https://pearce790.github.io/rankclust/reference/fit_BTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Bayesian BTL model to ordinal comparison data (recommended for internal use only; use mcmc_BTL function instead) — fit_BTL","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. J numeric indicating total number objects compared. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. nu0 numeric vector initialization worth parameters, omega, MCMC algorithm. Default NULL, indicating random initialization. num_iters numeric indicating total number MCMC iterations. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/fit_BTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Bayesian BTL model to ordinal comparison data (recommended for internal use only; use mcmc_BTL function instead) — fit_BTL","text":"list containing single element, omega, num_itersxJ matrix approximate posterior draws object-specific worth parameters, omega.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/fit_BTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Bayesian BTL model to ordinal comparison data (recommended for internal use only; use mcmc_BTL function instead) — fit_BTL","text":"","code":"Pi <- matrix(data=c(1,2,3,NA,NA,1,2,3,4,5),byrow=TRUE,nrow=2) fit_BTL(Pi=Pi,J=5,a_gamma=5,b_gamma=3,num_iters=10) #> $omega #>            [,1]      [,2]      [,3]      [,4]      [,5] #>  [1,] 2.2087687 0.6290951 1.6497304 0.9911702 0.6867723 #>  [2,] 1.7027263 1.8001578 1.7997254 2.2333694 0.7633219 #>  [3,] 2.0556841 1.4255751 4.3564411 1.4813864 1.4146173 #>  [4,] 2.1437817 2.4208615 0.4927043 1.3568256 1.7316654 #>  [5,] 2.1938377 1.4664938 0.8284241 0.8603124 1.4115758 #>  [6,] 3.0355501 3.4747809 1.3745432 1.4583612 1.8030372 #>  [7,] 0.8985659 2.6129820 2.7355469 3.2528724 1.9880213 #>  [8,] 3.9209424 2.8524235 1.2889777 0.6134465 1.1837657 #>  [9,] 3.8902373 0.8861958 1.0606990 1.8937736 1.1755605 #> [10,] 1.0363614 1.7120185 3.3922801 1.9851363 1.9711427 #>"},{"path":"https://pearce790.github.io/rankclust/reference/fit_RCBTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Bayesian Rank-Clustered BTL model to ordinal comparison data (recommended for internal use only; use mcmc_RCBTL function instead) — fit_RCBTL","title":"Fit a Bayesian Rank-Clustered BTL model to ordinal comparison data (recommended for internal use only; use mcmc_RCBTL function instead) — fit_RCBTL","text":"function fits Bayesian Rank-Clustered BTL model ordinal comparison data (e.g., complete rankings, partial rankings, pairwise comparisons, groupwise comparisons) worth parameters drawn PSSF prior (defined Pearce Erosheva 2024).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/fit_RCBTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Bayesian Rank-Clustered BTL model to ordinal comparison data (recommended for internal use only; use mcmc_RCBTL function instead) — fit_RCBTL","text":"","code":"fit_RCBTL(   Pi,   J,   a_gamma,   b_gamma,   lambda,   nu0 = NULL,   num_iters = 100,   nu_reps = 3,   groupwise = FALSE )"},{"path":"https://pearce790.github.io/rankclust/reference/fit_RCBTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Bayesian Rank-Clustered BTL model to ordinal comparison data (recommended for internal use only; use mcmc_RCBTL function instead) — fit_RCBTL","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. J numeric indicating total number objects compared. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. lambda numeric Poisson hyperparameter number non-empty clusters partition worth parameters. nu0 numeric vector initialization worth parameters, omega, MCMC algorithm. Default NULL, indicating random initialization. num_iters numeric indicating total number outer MCMC iterations (.e., number times partition updated Gibbs sampler). nu_reps numeric indicating number times worth parameter drawn per update parameter partition. total num_itersxnu_reps samples posterior. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/fit_RCBTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Bayesian Rank-Clustered BTL model to ordinal comparison data (recommended for internal use only; use mcmc_RCBTL function instead) — fit_RCBTL","text":"list 4 elements: omega, (num_itersxnu_reps)xJ matrix approximate posterior draws object-specific worth parameters, omega; nu (num_itersxnu_reps)xJ matrix unique parameter values corresponding jth partition cluster posterior draw , g (num_itersxnu_reps)xJ matrix indicating cluster membership object j posterior draw , K vector number non-empty partition clusters posterior draw.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/fit_RCBTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Bayesian Rank-Clustered BTL model to ordinal comparison data (recommended for internal use only; use mcmc_RCBTL function instead) — fit_RCBTL","text":"","code":"Pi <- matrix(data=c(1,2,3,NA,NA,1,2,3,4,5),byrow=TRUE,nrow=2) fit_RCBTL(Pi=Pi,J=5,a_gamma=5,b_gamma=3,lambda=2,num_iters=5,nu_reps=2) #> $omega #>            [,1]      [,2]      [,3]      [,4]      [,5] #>  [1,] 1.2635258 0.6098669 1.2635258 0.6098669 1.2635258 #>  [2,] 1.4113309 1.1734638 1.4113309 1.1734638 1.4113309 #>  [3,] 1.2919746 1.0833011 1.2919746 1.0833011 1.2919746 #>  [4,] 1.9052428 1.4648513 1.9052428 1.4648513 1.9052428 #>  [5,] 1.6184554 3.4566871 1.6184554 3.4566871 1.6184554 #>  [6,] 1.9693112 1.1706151 1.9693112 1.1706151 1.9693112 #>  [7,] 1.4465826 0.7935678 1.4465826 0.7935678 1.4465826 #>  [8,] 1.0348992 0.5976839 1.0348992 0.5976839 1.0348992 #>  [9,] 0.9657842 4.0899460 0.9657842 1.6822816 0.9657842 #> [10,] 0.8758932 1.8412922 0.8758932 1.4020022 0.8758932 #>  #> $nu #>           [,1]      [,2]      [,3] [,4] [,5] #>  [1,] 1.263526 0.6098669        NA   NA   NA #>  [2,] 1.411331 1.1734638        NA   NA   NA #>  [3,] 1.291975 1.0833011        NA   NA   NA #>  [4,] 1.905243 1.4648513        NA   NA   NA #>  [5,] 1.618455 3.4566871        NA   NA   NA #>  [6,] 1.969311 1.1706151        NA   NA   NA #>  [7,] 1.446583 0.7935678        NA   NA   NA #>  [8,] 1.034899 0.5976839        NA   NA   NA #>  [9,] 4.089946 1.6822816 0.9657842   NA   NA #> [10,] 1.841292 1.4020022 0.8758932   NA   NA #>  #> $g #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    2    1    2    1 #>  [2,]    1    2    1    2    1 #>  [3,]    1    2    1    2    1 #>  [4,]    1    2    1    2    1 #>  [5,]    1    2    1    2    1 #>  [6,]    1    2    1    2    1 #>  [7,]    1    2    1    2    1 #>  [8,]    1    2    1    2    1 #>  [9,]    3    1    3    2    3 #> [10,]    3    1    3    2    3 #>  #> $K #>  [1] 2 2 2 2 2 2 2 2 3 3 #>"},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_BTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian BTL model to ordinal comparison data using multiple MCMC chains — mcmc_BTL","title":"Fit Bayesian BTL model to ordinal comparison data using multiple MCMC chains — mcmc_BTL","text":"function fits standard Bayesian BTL model ordinal comparison data (e.g., complete rankings, partial rankings, pairwise comparisons, groupwise comparisons) worth parameter receives independent Gamma prior. function input parameters permit drawing multiple MCMC chains, well thinning burn-.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_BTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian BTL model to ordinal comparison data using multiple MCMC chains — mcmc_BTL","text":"","code":"mcmc_BTL(   Pi,   J,   a_gamma,   b_gamma,   nu0 = NULL,   num_iters = 1000,   groupwise = FALSE,   chains = 4,   burn_prop = 0.5,   thin = 1,   seed = NULL,   normalize_omega = TRUE )"},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_BTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian BTL model to ordinal comparison data using multiple MCMC chains — mcmc_BTL","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. J numeric indicating total number objects compared. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. nu0 numeric vector initialization worth parameters, omega, MCMC algorithm. Default NULL, indicating random initialization. num_iters numeric indicating total number MCMC iterations. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE). chains numeric indicating total number independent MCMC chains run. burn_prop numeric 0 1 indicating proportion MCMC samples chain removed burn-. thin numeric indicating every thin-th sample retained, save computational memory. seed numeric indicating random seed set running first MCMC chain. normalize_omega boolean indicating posterior draw omega normalized post-hoc sum 1; removes standard identifiability concern BTL models.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_BTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian BTL model to ordinal comparison data using multiple MCMC chains — mcmc_BTL","text":"(chainsxnum_iters/thin)x(J+2) matrix posterior draws, one row per posterior sample omega, additional columns indicating MCMC chain index iteration index posterior sample.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_BTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian BTL model to ordinal comparison data using multiple MCMC chains — mcmc_BTL","text":"","code":"Pi <- matrix(data=c(1,2,3,NA,NA,1,2,3,4,5),byrow=TRUE,nrow=2) mcmc_BTL(Pi=Pi,J=5,a_gamma=5,b_gamma=3,num_iters=6,chains=2,seed=1) #> [1] \"Estimating chain 1 of 2.\" #> [1] \"Estimating chain 2 of 2.\" #>   chain iteration    omega1    omega2    omega3    omega4     omega5 #> 1     1         4 0.3560190 0.1115476 0.2392734 0.2195547 0.07360522 #> 2     1         5 0.1234655 0.3105911 0.2502775 0.1852458 0.13042023 #> 3     1         6 0.1361384 0.1997596 0.2945877 0.1555556 0.21395875 #> 4     2         4 0.2134742 0.3569195 0.1404079 0.1427169 0.14648161 #> 5     2         5 0.1742432 0.3686610 0.1594318 0.2090950 0.08856901 #> 6     2         6 0.2058945 0.2079415 0.2152427 0.1316243 0.23929709"},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_RCBTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian Rank-Clustered BTL model to ordinal comparison data using multiple MCMC chains — mcmc_RCBTL","title":"Fit Bayesian Rank-Clustered BTL model to ordinal comparison data using multiple MCMC chains — mcmc_RCBTL","text":"function fits Bayesian Rank-Clustered BTL model ordinal comparison data (e.g., complete rankings, partial rankings, pairwise comparisons, groupwise comparisons) worth parameters drawn PSSF prior (defined Pearce Erosheva 2024). function input parameters permit drawing multiple MCMC chains, well thinning burn-.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_RCBTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian Rank-Clustered BTL model to ordinal comparison data using multiple MCMC chains — mcmc_RCBTL","text":"","code":"mcmc_RCBTL(   Pi,   J,   a_gamma,   b_gamma,   lambda,   nu0 = NULL,   num_iters = 1000,   nu_reps = 2,   groupwise = FALSE,   chains = 4,   burn_prop = 0.5,   thin = 1,   seed = NULL,   normalize_omega = TRUE )"},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_RCBTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian Rank-Clustered BTL model to ordinal comparison data using multiple MCMC chains — mcmc_RCBTL","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. J numeric indicating total number objects compared. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. lambda numeric Poisson hyperparameter number non-empty clusters partition worth parameters. nu0 numeric vector initialization worth parameters, omega, MCMC algorithm. Default NULL, indicating random initialization. num_iters numeric indicating total number outer MCMC iterations (.e., number times partition updated Gibbs sampler). nu_reps numeric indicating number times worth parameter drawn per update parameter partition. total num_itersxnu_reps samples posterior. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE). chains numeric indicating total number independent MCMC chains run. burn_prop numeric 0 1 indicating proportion MCMC samples chain removed burn-. thin numeric indicating every thin-th sample retained, save computational memory. seed numeric indicating random seed set running first MCMC chain. normalize_omega boolean indicating posterior draw omega normalized post-hoc sum 1; removes standard identifiability concern BTL models.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_RCBTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian Rank-Clustered BTL model to ordinal comparison data using multiple MCMC chains — mcmc_RCBTL","text":"(chainsxnum_iters/thin)x(3J+3) matrix posterior draws, one row per posterior sample omega, nu, g, additional columns indicating MCMC chain index, iteration index, number non-empty partition clusters K posterior sample.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/mcmc_RCBTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian Rank-Clustered BTL model to ordinal comparison data using multiple MCMC chains — mcmc_RCBTL","text":"","code":"Pi <- matrix(data=c(1,2,3,NA,NA,1,2,3,4,5),byrow=TRUE,nrow=2) mcmc_RCBTL(Pi=Pi,J=5,a_gamma=5,b_gamma=3,lambda=2,num_iters=6,chains=2,seed=1) #> [1] \"Estimating chain 1 of 2.\" #> [1] \"Estimating chain 2 of 2.\" #>    chain iteration K    omega1     omega2    omega3     omega4     omega5 #> 1      1         7 3 0.1777953 0.31750660 0.1777953 0.16345145 0.16345145 #> 2      1         8 3 0.2513852 0.18656516 0.2513852 0.15533222 0.15533222 #> 3      1         9 2 0.2590933 0.25909325 0.2590933 0.11136012 0.11136012 #> 4      1        10 2 0.2639907 0.26399069 0.2639907 0.10401396 0.10401396 #> 5      1        11 3 0.1542067 0.25029243 0.2502924 0.17260423 0.17260423 #> 6      1        12 3 0.3892696 0.17866193 0.1786619 0.12670328 0.12670328 #> 7      2         7 2 0.2636675 0.15755503 0.2636675 0.15755503 0.15755503 #> 8      2         8 2 0.2238598 0.18409344 0.2238598 0.18409344 0.18409344 #> 9      2         9 2 0.4111159 0.05925609 0.4111159 0.05925609 0.05925609 #> 10     2        10 2 0.3399780 0.10668136 0.3399780 0.10668136 0.10668136 #> 11     2        11 3 0.2145040 0.22085273 0.2145040 0.17506965 0.17506965 #> 12     2        12 3 0.2933620 0.26246218 0.2933620 0.07540692 0.07540692 #>          nu1       nu2      nu3 nu4 nu5 G1 G2 G3 G4 G5 #> 1  1.6692163 2.9808851 1.534551  NA  NA  1  2  1  3  3 #> 2  3.0905706 2.2936625 1.909680  NA  NA  1  2  1  3  3 #> 3  0.8955763 2.0836702       NA  NA  NA  2  2  2  1  1 #> 4  1.0556267 2.6792136       NA  NA  NA  2  2  2  1  1 #> 5  1.4040969 1.2544368 2.036073  NA  NA  2  3  3  1  1 #> 6  0.7405974 2.2753321 1.044303  NA  NA  2  3  3  1  1 #> 7  1.3255255 2.2182595       NA  NA  NA  2  1  2  1  1 #> 8  0.8006794 0.9736358       NA  NA  NA  2  1  2  1  1 #> 9  0.5373506 3.7281119       NA  NA  NA  2  1  2  1  1 #> 10 0.7759975 2.4729913       NA  NA  NA  2  1  2  1  1 #> 11 1.6647344 1.3196326 1.616879  NA  NA  3  1  3  2  2 #> 12 2.4788624 0.7121917 2.770700  NA  NA  3  1  3  2  2"},{"path":"https://pearce790.github.io/rankclust/reference/obtain_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of constants for Gibbs sampling of worth parameters via data augmentation (internal use only) — obtain_constants","title":"Calculation of constants for Gibbs sampling of worth parameters via data augmentation (internal use only) — obtain_constants","text":"function calculates constants c_k0 delta_irk0 based observed rankings Pi, defined Pearce Erosheva (2024). internal use .","code":""},{"path":"https://pearce790.github.io/rankclust/reference/obtain_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of constants for Gibbs sampling of worth parameters via data augmentation (internal use only) — obtain_constants","text":"","code":"obtain_constants(Pi, I, J, groupwise = FALSE)"},{"path":"https://pearce790.github.io/rankclust/reference/obtain_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of constants for Gibbs sampling of worth parameters via data augmentation (internal use only) — obtain_constants","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. numeric indicating number rows Pi J numeric indicating total number objects compared. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/obtain_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of constants for Gibbs sampling of worth parameters via data augmentation (internal use only) — obtain_constants","text":"list containing calculated constants c_k0 delta_irk0.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rBTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data generation from standard BTL models — rBTL","title":"Random data generation from standard BTL models — rBTL","text":"function randomly draws data Bradley-Terry-Luce (BTL) model object-specific worth parameters, omega. Currently, complete partial rankings may drawn, although may subsetted simulate groupwise comparison data consequence Luce's Axiom Choice.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rBTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data generation from standard BTL models — rBTL","text":"","code":"rBTL(I, omega, R = NULL)"},{"path":"https://pearce790.github.io/rankclust/reference/rBTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data generation from standard BTL models — rBTL","text":"numeric indicating number observations draw. omega vector non-negative object worth parameters. R numeric indicating length ranking. Default NULL, indicating draw complete rankings.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rBTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data generation from standard BTL models — rBTL","text":"IxR matrix rankings.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rBTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data generation from standard BTL models — rBTL","text":"","code":"set.seed(1) rBTL(I=5,omega=c(10,5,1),R=3) #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    2    1    3 #> [3,]    3    1    2 #> [4,]    1    2    3 #> [5,]    2    1    3"},{"path":"https://pearce790.github.io/rankclust/reference/rRCBTL.html","id":null,"dir":"Reference","previous_headings":"","what":"Random data generation from Rank-Clustered BTL models — rRCBTL","title":"Random data generation from Rank-Clustered BTL models — rRCBTL","text":"function randomly draws data Rank-Clustered Bradley-Terry-Luce (BTL) model object-specific worth parameters, omega. Currently, complete partial rankings may drawn, although may subsetted simulate groupwise comparison data consequence Luce's Axiom Choice.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rRCBTL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random data generation from Rank-Clustered BTL models — rRCBTL","text":"","code":"rRCBTL(I, J, a_gamma, b_gamma, lambda, return_all = FALSE)"},{"path":"https://pearce790.github.io/rankclust/reference/rRCBTL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random data generation from Rank-Clustered BTL models — rRCBTL","text":"numeric indicating number observations draw. J numeric indicating total number objects compared. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. lambda numeric Poisson hyperparameter number non-empty clusters partition worth parameters. return_all boolean indicator K, partitions, nu, omega return addition generated rankings, Pi.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rRCBTL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random data generation from Rank-Clustered BTL models — rRCBTL","text":"IxR matrix rankings (return_all=FALSE), list containing Pi, K, partitions, nu, omega (return_all=TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/rRCBTL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random data generation from Rank-Clustered BTL models — rRCBTL","text":"","code":"set.seed(1) rRCBTL(I=3,J=5,a_gamma=5,b_gamma=3,lambda=3,return_all=TRUE) #> $Pi #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    5    3    4    2    1 #> [2,]    2    4    1    5    3 #> [3,]    1    5    2    3    4 #>  #> $K #> [1] 2 #>  #> $partition #> [1] 2 1 1 2 1 #>  #> $nu #> [1] 2.840111 1.742045 #>  #> $omega #> [1] 1.742045 2.840111 2.840111 1.742045 2.840111 #>"},{"path":"https://pearce790.github.io/rankclust/reference/sample_nu.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling of unique parameter worth values, nu, in Bayesian Rank-Clustered BTL models (internal use only) — sample_nu","title":"Sampling of unique parameter worth values, nu, in Bayesian Rank-Clustered BTL models (internal use only) — sample_nu","text":"function implements Gibbs sampler via data augmentation updating unique worth parameters, nu, Bayesian Rank-Clustered BTL models. internal use .","code":""},{"path":"https://pearce790.github.io/rankclust/reference/sample_nu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling of unique parameter worth values, nu, in Bayesian Rank-Clustered BTL models (internal use only) — sample_nu","text":"","code":"sample_nu(   n = 1,   Pi,   I,   J,   nu,   p,   K,   a_gamma,   b_gamma,   c_k0 = NULL,   delta_irk0 = NULL,   groupwise = FALSE )"},{"path":"https://pearce790.github.io/rankclust/reference/sample_nu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling of unique parameter worth values, nu, in Bayesian Rank-Clustered BTL models (internal use only) — sample_nu","text":"n numeric indicating number posterior samples draw. Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. numeric indicating number rows Pi J numeric indicating total number objects compared. nu vector indicating current values nu Gibbs sampler. p vector indicating current values g Gibbs sampler. K vector indicating current values K Gibbs sampler. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. c_k0 vector constants, calculated obtain_constants function. delta_irk0 matrix constants, calculated obtain_constants function. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/sample_nu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling of unique parameter worth values, nu, in Bayesian Rank-Clustered BTL models (internal use only) — sample_nu","text":"matrix containing updated values nu n posterior samples.","code":""},{"path":"https://pearce790.github.io/rankclust/reference/sample_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition sampling in Bayesian Rank-Clustered BTL models (internal use only) — sample_partition","title":"Partition sampling in Bayesian Rank-Clustered BTL models (internal use only) — sample_partition","text":"function implements reversible jump MCMC procedure updating parameter partition Bayesian Rank-Clustered BTL models. internal use .","code":""},{"path":"https://pearce790.github.io/rankclust/reference/sample_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition sampling in Bayesian Rank-Clustered BTL models (internal use only) — sample_partition","text":"","code":"sample_partition(   Pi,   I,   J,   nu,   g,   K,   a_gamma,   b_gamma,   logprior_partition,   b_g = 0.5,   d_g = 0.5,   groupwise = FALSE )"},{"path":"https://pearce790.github.io/rankclust/reference/sample_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition sampling in Bayesian Rank-Clustered BTL models (internal use only) — sample_partition","text":"Pi matrix rankings, (,j) entry index jth-preferred object according judge . groupwise=TRUE, index corresponds jth-preferred object among row ; groupwise=FALSE, assumd unranked objects () less preferred ranked. numeric indicating number rows Pi J numeric indicating total number objects compared. nu vector indicating current values nu Gibbs sampler. g vector indicating current values g Gibbs sampler. K vector indicating current values K Gibbs sampler. a_gamma numeric first hyperparameter (shape) Gamma prior worth parameter. b_gamma numeric second hyperparameter (rate) Gamma prior worth parameter. logprior_partition J-vector indicating log unnormalized probability possible partition, based number non-empty clusters. b_g probability \"birth\"ing new partition cluster, possible. d_g probability \"death\"ing existing partition cluster, possible. groupwise boolean indicate whether observed rankings complete/partial rankings (FALSE; default) groupwise comparisons (TRUE).","code":""},{"path":"https://pearce790.github.io/rankclust/reference/sample_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition sampling in Bayesian Rank-Clustered BTL models (internal use only) — sample_partition","text":"list containing updated values g, nu, K.","code":""}]
